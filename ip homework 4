//question 1
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class CombinationSum {

    public static List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(result, new ArrayList<>(), candidates, target, 0);
        return result;
    }

    private static void backtrack(List<List<Integer>> result, List<Integer> currentList, int[] candidates, int target, int start) {
        if (target < 0) {
            return;
        } else if (target == 0) {
            result.add(new ArrayList<>(currentList));
        } else {
            for (int i = start; i < candidates.length; i++) {
                currentList.add(candidates[i]);
                backtrack(result, currentList, candidates, target - candidates[i], i);
                currentList.remove(currentList.size() - 1);
            }
        }
    }

    public static void main(String[] args) {
        int[] candidates = {2, 3, 6, 7};
        int target = 7;

        List<List<Integer>> result = combinationSum(candidates, target);

        System.out.println("Combinations that sum up to " + target + ": ");
        for (List<Integer> combination : result) {
            System.out.println(combination);
        }
    }
}
//question 3
public class RatInAMaze {

    public static void main(String[] args) {
        int[][] maze = {
            {1, 0, 0, 0},
            {1, 1, 0, 1},
            {0, 1, 0, 0},
            {1, 1, 1, 1}
        };

        solveMaze(maze);
    }

    public static void solveMaze(int[][] maze) {
        int rows = maze.length;
        int cols = maze[0].length;

        int[][] solution = new int[rows][cols];

        if (solveMazeUtil(maze, 0, 0, solution)) {
            printSolution(solution);
        } else {
            System.out.println("No solution exists.");
        }
    }

    private static boolean solveMazeUtil(int[][] maze, int x, int y, int[][] solution) {
        int rows = maze.length;
        int cols = maze[0].length;

        // Check if the current position is a valid move
        if (x >= 0 && x < rows && y >= 0 && y < cols && maze[x][y] == 1) {
            solution[x][y] = 1; // Mark the current cell as part of the solution

            // Check if the rat reached the destination
            if (x == rows - 1 && y == cols - 1) {
                return true;
            }

            // Move right
            if (solveMazeUtil(maze, x, y + 1, solution)) {
                return true;
            
//question 4
import java.util.ArrayList;
import java.util.List;

public class GenerateParentheses {

    public static void main(String[] args) {
        int n = 3;
        List<String> result = generateParenthesis(n);

        System.out.println("Generated Parentheses for n = " + n + ": ");
        for (String combination : result) {
            System.out.println(combination);
        }
    }

    public static List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        generateParenthesisHelper(result, "", 0, 0, n);
        return result;
    }

    private static void generateParenthesisHelper(List<String> result, String current, int open, int close, int n) {
        if (current.length() == 2 * n) {
            result.add(current);
            return;
        }

        if (open < n) {
            generateParenthesisHelper(result, current + "(", open + 1, close, n);
        }
        if (close < open) {
            generateParenthesisHelper(result, current + ")", open, close + 1, n);
        }
    }
}
